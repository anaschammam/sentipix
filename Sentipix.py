# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Sentipix
                                 A QGIS plugin
 downloading Sentinel-2 and Sentinel-3 data and performing image processing tasks
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-06-25
        git sha              : $Format:%H$
        copyright            : (C) 2023 by anas chammam
        email                : anas.chammam@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import threading

import sentinelsat
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import QMessageBox, QTableWidgetItem, QFileDialog, QLineEdit
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from sentinelsat import SentinelAPI, InvalidChecksumError, LTATriggered, LTAError

from .resources import *
# Import the code for the dialog
from .Sentipix_dialog import SentipixDialog
import os.path
from PyQt5.QtCore import Qt
from PyQt5 import QtWidgets
class Sentipix:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Sentipix_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Sentipix')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Sentipix', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/Sentipix/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Sentipix'),
                action)
            self.iface.removeToolBarIcon(action)

    def get_path_of_satellites_images(self, path_to_extracted_folder):
        import os
        import xml.etree.ElementTree as ET

        # Change directory to the desired path
        os.chdir(path_to_extracted_folder)

        # List the contents of the current directory
        contents = os.listdir()

        spacecraft_name = None
        image_files = []
        has_sentinel3_namespace=None

        for item in contents:
            if 'xml' in item and item != 'INSPIRE.xml' and item!='manifest.safe':
                metadata_s2 = item

                # Path to the XML file
                xml_file = metadata_s2

                # Parse the XML file
                tree = ET.parse(xml_file)
                root = tree.getroot()
                spacecraft_name_elem = root.find(".//SPACECRAFT_NAME")
                if spacecraft_name_elem is not None:
                    spacecraft_name = spacecraft_name_elem.text
                    image_files = [elem.text for elem in root.iter("IMAGE_FILE")]
                # Extract IMAGE_FILE tag text

                # Extract SPACECRAFT_NAME tag text

        if spacecraft_name is not None:
            # Print the extracted image files
            images_file_path = []
            separator = self.changing_directory_seperator()
            for i in image_files:
                images_file_path.append(path_to_extracted_folder + separator + i)
            return images_file_path, spacecraft_name
        else:
            noExtractionNeeded=[]
            return noExtractionNeeded,'Sentinel-3'
    def get_images_by_band(self):
        pass
    def Run_indices_calculation(self):
        import sys
        data_source=self.dlg.selected_data_input.toPlainText()
        str_path, sep = self.verify_storage_path(data_source)
        # Get the path of the current script
        plugin_dir = os.path.dirname(os.path.realpath(__file__))
        # Construct the path to the image_processing folder
        img_processing_path = os.path.join(plugin_dir, 'image_processing')

        # Check if the image_processing folder is already in the module search path
        if img_processing_path not in sys.path:
            # Add the image_processing folder to the module search path
            sys.path.append(img_processing_path)

        # Now you can import the image_processing module
        from .image_processing.all_index import calculate_ndvi
        if str_path==True:
            images_path,spacecraft_name=self.get_path_of_satellites_images(data_source)
            if 'Sentinel-2' in spacecraft_name:
                blue_band_resolution_10m=[]#B02 10m
                green_band_resolution_10m=[]#B03 10m
                red_band_resolution_10m=[]#B04 10m
                nir1_band_resolution_10m=[]#B08 10m

                coastal_aerosol_resolution_60m=[]#B01 60m
                blue_band_resolution_60m=[]#B02 60m
                green_band_resolution_60m=[]#B03 60m
                red_band_resolution_60m=[]#B04 60m
                nir1_band_resolution_60m=[]#B08 60m
                nir2_band_resolution_60m=[]#B8A 60m
                swir_band940nm_resolution_60m=[]#B09 60m
                swir_band1375nm_resolution_60m=[]#B10 60m
                swir_band1610nm_resolution_60m=[]#B11 60m
                swir_band2190nm_resolution_60m=[]#B12 60m

                coastal_aerosol_resolution_20m=[]
                blue_band_resolution_20m=[]#B02 20m
                green_band_resolution_20m=[]#B03 20m
                red_band_resolution_20m=[]#B04 20m
                nir2_band_resolution_20m=[]#B8A 20m
                swir_band1610nm_resolution_20m=[]#B11 20m
                swir_band2190nm_resolution_20m=[]#B12 20m
                for i in images_path:
                    ######### 10m ##########
                    if 'B02_10' in i:
                        blue_band_resolution_10m.append(i)
                    elif 'B03_10' in i:
                        green_band_resolution_10m.append(i)
                    elif 'B04_10' in i:
                        red_band_resolution_10m.append(i)
                    elif 'B08_10' in i:
                        nir1_band_resolution_10m.append(i)
                    ######### 20m ##########
                    elif 'B01_20' in i:
                        coastal_aerosol_resolution_20m.append(i)
                    elif 'B02_20' in i:
                        blue_band_resolution_20m.append(i)
                    elif 'B03_20' in i:
                        green_band_resolution_20m.append(i)
                    elif 'B04_20' in i:
                        red_band_resolution_20m.append(i)
                    elif 'B8A_20' in i:
                        nir2_band_resolution_20m.append(i)
                    elif 'B11_20' in i:
                        swir_band1610nm_resolution_20m.append(i)
                    elif 'B12_20' in i:
                        swir_band2190nm_resolution_20m.append(i)
                    ######## 60m ##########
                    elif 'B01_60' in i:
                        coastal_aerosol_resolution_60m.append(i)
                    elif 'B02_60' in i:
                        blue_band_resolution_60m.append(i)
                    elif 'B03_60' in i:
                        green_band_resolution_60m.append(i)
                    elif 'B04_60' in i:
                        red_band_resolution_60m.append(i)
                    elif 'B8A_60' in i:
                        nir2_band_resolution_60m.append(i)
                    elif 'B09_60' in i:
                        swir_band940nm_resolution_60m.append(i)
                    elif 'B10_60' in i:
                        swir_band1375nm_resolution_60m.append(i)
                    elif 'B11_60' in i:
                        swir_band1610nm_resolution_60m.append(i)
                    elif 'B12_60' in i:
                        swir_band2190nm_resolution_60m.append(i)
                    #########################################
                if len(red_band_resolution_20m)!=0:
                    print("start spectral index calculating")
                    msg_box = QMessageBox()
                    msg_box.setWindowTitle("processing start")
                    msg_box.setText('Your processing task has started , we will notify you when it ends')
                    msg_box.exec_()
                    red_b=red_band_resolution_10m[0]+'.jp2'
                    blue_b=blue_band_resolution_10m[0]+'.jp2'
                    green_b=green_band_resolution_10m[0]+'.jp2'
                    nir_b=nir1_band_resolution_10m[0]+'.jp2'
                    swir1_b=swir_band1610nm_resolution_20m[0]+'.jp2'
                    swir2_b=swir_band2190nm_resolution_20m[0]+'.jp2'

                    if self.dlg.evi_checkbox.isChecked():
                        from .image_processing.all_index import calculate_evi
                        evi_filename = data_source + '_10m_evi.tif'
                        calculate_evi(evi_filename,red_b,nir_b,blue_b)
                    if self.dlg.msavi_checkbox.isChecked():
                        from .image_processing.all_index import calculate_msavi
                        msavi_filename = data_source + '_10m_msavi.tif'
                        calculate_msavi(msavi_filename,red_b,nir_b)
                    if self.dlg.ndvi_checkbox.isChecked():
                        from .image_processing.all_index import calculate_ndvi
                        ndvi_filename = data_source + '_10m_ndvi.tif'
                        calculate_ndvi(ndvi_filename,red_b, nir_b)
                    if self.dlg.gndvi_checkbox.isChecked():
                        from .image_processing.all_index import calculate_gndvi
                        gndvi_filename = data_source + '_10m_gndvi.tif'
                        calculate_gndvi(gndvi_filename,green_b, nir_b)
                    if self.dlg.lswi_checkbox.isChecked():
                        from .image_processing.all_index import calculate_lswi
                        lswi_filename = data_source + '_20m_lswi.tif'
                        calculate_lswi(lswi_filename,swir1_b, nir_b)
                    if self.dlg.mndwi_checkbox.isChecked():
                        from .image_processing.all_index import calculate_mndwi
                        mndwi_filename = data_source + '_20m_mndwi.tif'
                        calculate_mndwi(mndwi_filename,green_b, swir1_b)
                    if self.dlg.ndwi_checkbox.isChecked():
                        from .image_processing.all_index import calculate_ndwi
                        ndwi_filename = data_source + '_10m_ndwi.tif'
                        calculate_ndwi(ndwi_filename,green_b, nir_b)
                    if self.dlg.brba_checkbox.isChecked():
                        from .image_processing.all_index import calculate_brba
                        brba_filename = data_source + '_20m_brba.tif'
                        calculate_brba(brba_filename,red_b, swir2_b)
                    if self.dlg.ndbi_checkbox.isChecked():
                        from .image_processing.all_index import calculate_ndbi
                        ndbi_filename = data_source + '_20m_ndbi.tif'
                        calculate_ndbi(ndbi_filename,swir1_b, nir_b)
                    if self.dlg.bui_checkbox.isChecked():
                        from .image_processing.all_index import calculate_bui
                        bui_filename = data_source + '_20m_bui.tif'
                        calculate_bui(bui_filename,swir1_b, nir_b,red_b)
                    if self.dlg.nbr_checkbox.isChecked():
                        from .image_processing.all_index import calculate_nbr
                        nbr_filename = data_source + '_20m_nbr.tif'
                        calculate_nbr(nbr_filename,swir1_b, nir_b)
                    if self.dlg.bai_checkbox.isChecked():
                        from .image_processing.all_index import calculate_bai
                        bai_filename = data_source + '_10m_bai.tif'
                        calculate_bai(bai_filename,red_b, nir_b)
                    if self.dlg.cbi_checkbox.isChecked():
                        from .image_processing.all_index import calculate_cbi
                        cbi_filename = data_source + '_20m_cbi.tif'
                        calculate_cbi(cbi_filename,swir1_b, nir_b,red_b)
                    print("end")
                    msg_box = QMessageBox()
                    msg_box.setWindowTitle("Processing end")
                    msg_box.setText('Your processing task has ended ')
                    msg_box.exec_()
                else:
                    for i in images_path:
                        ######### 60m ###########
                        if 'B01' in i :
                            coastal_aerosol_resolution_60m.append(i)
                        ######### 10m #########
                        elif 'B02' in i:
                            blue_band_resolution_10m.append(i)
                        elif 'B03' in i:
                            green_band_resolution_10m.append(i)
                        elif 'B04' in i:
                            red_band_resolution_10m.append(i)
                        elif 'B08' in i:
                            nir1_band_resolution_10m.append(i)
                        ####### 20m ########
                        elif 'B8A' in i:
                            nir2_band_resolution_20m.append(i)
                        ######## 60m #######
                        elif 'B09' in i:
                            swir_band940nm_resolution_60m.append(i)
                        elif 'B10' in i:
                            swir_band1375nm_resolution_60m.append(i)
                        ######## 20m ########
                        elif 'B11' in i:
                            swir_band1610nm_resolution_20m.append(i)
                        elif 'B12' in i:
                            swir_band2190nm_resolution_20m.append(i)
                        #########################
                    msg_box = QMessageBox()
                    msg_box.setWindowTitle("processing start")
                    msg_box.setText('Your processing task has started , we will notify you when it ends')
                    msg_box.exec_()
                    print("start spectral index calculating")
                    red_b=red_band_resolution_10m[0]+'.jp2'
                    blue_b=blue_band_resolution_10m[0]+'.jp2'
                    green_b=green_band_resolution_10m[0]+'.jp2'
                    nir_b=nir2_band_resolution_20m[0]+'.jp2'
                    swir1_b=swir_band1610nm_resolution_20m[0]+'.jp2'
                    swir2_b=swir_band2190nm_resolution_20m[0]+'.jp2'
                    if self.dlg.evi_checkbox.isChecked():
                        from .image_processing.all_index import calculate_evi
                        evi_filename = data_source + '_20m_evi.tif'
                        calculate_evi(evi_filename,red_b,nir_b,blue_b)
                    if self.dlg.msavi_checkbox.isChecked():
                        from .image_processing.all_index import calculate_msavi
                        msavi_filename = data_source + '_20m_msavi.tif'
                        calculate_msavi(msavi_filename,red_b,nir_b)
                    if self.dlg.ndvi_checkbox.isChecked():
                        from .image_processing.all_index import calculate_ndvi
                        ndvi_filename = data_source + '_20m_ndvi.tif'
                        calculate_ndvi(ndvi_filename,red_b, nir_b)
                    if self.dlg.gndvi_checkbox.isChecked():
                        from .image_processing.all_index import calculate_gndvi
                        gndvi_filename = data_source + '_20m_gndvi.tif'
                        calculate_gndvi(gndvi_filename,green_b, nir_b)
                    if self.dlg.lswi_checkbox.isChecked():
                        from .image_processing.all_index import calculate_lswi
                        lswi_filename = data_source + '_20m_lswi.tif'
                        calculate_lswi(lswi_filename,swir1_b, nir_b)
                    if self.dlg.mndwi_checkbox.isChecked():
                        from .image_processing.all_index import calculate_mndwi
                        mndwi_filename = data_source + '_20m_mndwi.tif'
                        calculate_mndwi(mndwi_filename,green_b, swir1_b)
                    if self.dlg.ndwi_checkbox.isChecked():
                        from .image_processing.all_index import calculate_ndwi
                        ndwi_filename = data_source + '_20m_ndwi.tif'
                        calculate_ndwi(ndwi_filename,green_b, nir_b)
                    if self.dlg.brba_checkbox.isChecked():
                        from .image_processing.all_index import calculate_brba
                        brba_filename = data_source + '_20m_brba.tif'
                        calculate_brba(brba_filename,red_b, swir2_b)
                    if self.dlg.ndbi_checkbox.isChecked():
                        from .image_processing.all_index import calculate_ndbi
                        ndbi_filename = data_source + '_20m_ndbi.tif'
                        calculate_ndbi(ndbi_filename,swir1_b, nir_b)
                    if self.dlg.bui_checkbox.isChecked():
                        from .image_processing.all_index import calculate_bui
                        bui_filename = data_source + '_20m_bui.tif'
                        calculate_bui(bui_filename,swir1_b, nir_b,red_b)
                    if self.dlg.nbr_checkbox.isChecked():
                        from .image_processing.all_index import calculate_nbr
                        nbr_filename = data_source + '_20m_nbr.tif'
                        calculate_nbr(nbr_filename,swir1_b, nir_b)
                    if self.dlg.bai_checkbox.isChecked():
                        from .image_processing.all_index import calculate_bai
                        bai_filename = data_source + '_20m_bai.tif'
                        calculate_bai(bai_filename,red_b, nir_b)
                    if self.dlg.cbi_checkbox.isChecked():
                        from .image_processing.all_index import calculate_cbi
                        cbi_filename = data_source + '_20m_cbi.tif'
                        calculate_cbi(cbi_filename,swir1_b, nir_b,red_b)

                    msg_box = QMessageBox()
                    msg_box.setWindowTitle("Processing end")
                    msg_box.setText('Your processing task has ended ')
                    msg_box.exec_()

            elif spacecraft_name=='Sentinel-3':
                raster_path=data_source+sep
                a,b=self.verify_storage_path(raster_path+'NDVI.nc')
                if a==True:
                    from .image_processing.all_index import ndvi_sentinel_three

                    ndvi_sentinel_three(raster_path)
                    print("Only NDVI Available")
                    msg_box = QMessageBox()
                    msg_box.setWindowTitle("NDVI")
                    msg_box.setText('Only NDVI Available')
                    msg_box.exec_()
                else:
                    print("Sentinel3 doesn't offers all bands")
                    msg_box = QMessageBox()
                    msg_box.setWindowTitle("Sentinel-3")
                    msg_box.setText('Sentinel3 doesnt offers all bands, please choose sentinel-2 products')
                    msg_box.exec_()




        else:
            print("Invalid path")
            msg_box = QMessageBox()
            msg_box.setWindowTitle("Invalid path")
            msg_box.setText('the given path does not exist ')
            msg_box.exec_()



    def verify_authentification_bolean(self,username,password):
        api = SentinelAPI(username, password, "https://scihub.copernicus.eu/dhus")
        # Test the authentication by searching for products
        try:
            products = api.query(producttype='S2MSI1C', limit=1)
            print("Authentication successful!")
            return True
        except Exception as e:
            print("Authentication failed:", e)
            return False
    def verify_authentification_function(self):
        username = self.dlg.username_input.toPlainText()
        password = self.dlg.password_input.text()
        api = SentinelAPI(username, password, "https://scihub.copernicus.eu/dhus")
        # Test the authentication by searching for products
        try:
            products = api.query(producttype='S2MSI1C', limit=1)
            print("Authentication successful!")
            msg_box = QMessageBox()
            msg_box.setWindowTitle("Authentification Result")
            msg_box.setText('your cridential are right !')
            msg_box.exec_()
        except Exception as e:
            print("Authentication failed:", e)
            msg_box = QMessageBox()
            msg_box.setWindowTitle("Authentification Result")
            msg_box.setText('your cridential are not right !')
            msg_box.exec_()

    def verify_geojson(self):
        longitude_input = self.dlg.longitude_input.toPlainText()
        latitude_input = self.dlg.latitude_input.toPlainText()
        try:
            float(longitude_input)
            float(latitude_input)
            longitude_input=float(longitude_input)
            latitude_input=float(latitude_input)
            if longitude_input>=-180 and longitude_input <= 180 and latitude_input>=-90 and latitude_input <= 90:
                msg_box = QMessageBox()
                msg_box.setWindowTitle("Correct input")
                msg_box.setText('The given long and lat are correct !')
                msg_box.exec_()
                return True
            else:
                msg_box = QMessageBox()
                msg_box.setWindowTitle("Incorrect input")
                msg_box.setText('The given long and lat are not correct !')
                msg_box.exec_()
                return False
        except ValueError:
            msg_box = QMessageBox()
            msg_box.setWindowTitle("Incorrect input")
            msg_box.setText('The given long and lat are not correct !')
            msg_box.exec_()
            return False

    def verify_geojson_boolean(self,longitude_input,latitude_input):
        try:
            float(longitude_input)
            float(latitude_input)
            longitude_input=float(longitude_input)
            latitude_input=float(latitude_input)
            if longitude_input>=-180 and longitude_input <= 180 and latitude_input>=-90 and latitude_input <= 90:
                return True
            else:
                return False
        except ValueError:
            return False

    def update_value_cloud(self):
        value = self.dlg.cloud_cover_horizontalSlider.value()
        self.dlg.cloud_cover_slider_value.setText(str(value))
    def getProductsInfo(self,products):
        products_info=[]
        r=0
        for key1, value1 in products.items():
            # Create a new dictionary for each iteration
            data = {}
            # Iterate over the inner dictionary
            data['uuid'] = key1
            for key2, value2 in value1.items():
                # Access the keys and values of the inner dictionary
                if key2 == 'title':
                    data['title'] = value2
                    if 'S2A_MSI' in value2 or 'S2B_MSI' in value2:
                        pass
                elif key2 == 'platformname':
                    data['platformname'] = value2
                elif key2 == 'size':
                    data['size'] = value2
                elif key2 == 'beginposition':
                    data['Date&Time'] = str(value2)
                elif key2 == 'cloudcoverpercentage':
                    data['cloud cover %'] = value2
            products_info.append(data)
            r += 1
        return products_info
    def getOneProductInfo(self,uuid,array_products):
        title=''
        flag=False
        for key1, value1 in array_products.items():
            # Create a new dictionary for each iteration
            if key1!=uuid:
                continue
            if uuid==key1:
                for key2, value2 in value1.items():
                    # Access the keys and values of the inner dictionary
                    if key2 == 'title':
                        title = value2
                        print('im inside the title key1',title)
                        flag=True
            if flag==True:
                break


        return title

    def select_satellites_data(self):
        username = self.dlg.username_input.toPlainText()
        password = self.dlg.password_input.text()
        validate_cridential=self.verify_authentification_bolean(username,password)
        if validate_cridential==True:
            longitude_input=self.dlg.longitude_input.toPlainText()
            latitude_input=self.dlg.latitude_input.toPlainText()
            start_date=self.dlg.start_date_input.date()
            end_date=self.dlg.end_date_input.date()
            start_date_value=start_date.toString("yyyy-MM-dd").replace("-", "")
            end_date_value=end_date.toString("yyyy-MM-dd").replace("-", "")
            cloud_value = self.dlg.cloud_cover_horizontalSlider.value()
            api = SentinelAPI(username, password, "https://scihub.copernicus.eu/dhus")
            location_geojson='POINT('+longitude_input+' '+latitude_input+')'
            choosen_satellite = self.dlg.list_of_satellites.currentText()
            global products
            try:
                products = api.query(location_geojson,
                                     date=(start_date_value, end_date_value),
                                     platformname=choosen_satellite,
                                     cloudcoverpercentage=(0, cloud_value))
                if not products:
                    table_widget = self.dlg.table_available_data
                    table_widget.clearContents()
                else:
                    print(products)
                    Productsinfo=self.getProductsInfo(products)
                    row_count = len(Productsinfo)
                    column_count = len(Productsinfo[0])  # Assuming all dictionaries have the same keys
                    table_widget=self.dlg.table_available_data
                    table_widget.setRowCount(row_count)
                    table_widget.setColumnCount(column_count)

                    # Set the headers based on the dictionary keys
                    headers = list(Productsinfo[0].keys())
                    table_widget.setHorizontalHeaderLabels(headers)

                    # Populate the table with the data
                    for row, product in enumerate(Productsinfo):
                        for column, value in enumerate(product.values()):
                            item = QTableWidgetItem(str(value))
                            table_widget.setItem(row, column, item)
            except Exception as e:
                print(e)
        else :
            msg_box = QMessageBox()
            msg_box.setWindowTitle("Authentification Result")
            msg_box.setText('your cridential are not right !')
            msg_box.exec_()

    def btn_browse_clicked_storage_path(self):
        # Open a file dialog to select a directory
        path = QFileDialog.getExistingDirectory(
            caption="Select Downloads Folder",
            directory="",
            options=QFileDialog.ShowDirsOnly | QFileDialog.DontResolveSymlinks
        )
        # Set the selected path as the downloads folder
        if path:
            # Perform the desired action with the selected path
            # Your code here
            print("Downloads folder path:", path)
            self.dlg.storage_path_input.setText(path)
            # Set the path to the downloads folder in your application
    #btn_browse_clicked_mtd_path
    def btn_browse_clicked_mtd_path(self):
        self.dlg.choosen_mtd_input.setText("")
        # Open a file dialog to select a directory
        file_path, _ = QFileDialog.getOpenFileName(
            caption="Select MTD xml file",
            directory="",
            filter="XML Files (*.xml)"

        )
        # Set the selected path as the downloads folder
        if file_path:
            # Perform the desired action with the selected path
            # Your code here
            print("path of MTD xml:", file_path)
            self.dlg.choosen_mtd_input.setText(file_path)
            self.dlg.MTD_info_textBrowser.clear()

            # Read and parse the XML metadata file
            import xml.etree.ElementTree as ET
            tree = ET.parse(file_path)
            root = tree.getroot()

            # Retrieve the desired information from the XML file
            #SENSING_TIME
            sensing_time = root.findtext(".//SENSING_TIME")
            horizontal_cs_code = root.findtext(".//HORIZONTAL_CS_CODE")
            mean_sun_angle = root.find(".//Mean_Sun_Angle")
            zenith_angle = mean_sun_angle.findtext(".//ZENITH_ANGLE")
            azimuth_angle = mean_sun_angle.findtext(".//AZIMUTH_ANGLE")
            image_content_qi = root.find(".//Image_Content_QI")
            cloudy_pixel_percentage = image_content_qi.findtext(".//CLOUDY_PIXEL_PERCENTAGE")
            cloudy_pixel_over_land_percentage = image_content_qi.findtext(".//CLOUDY_PIXEL_OVER_LAND_PERCENTAGE")
            degraded_msi_data_percentage = image_content_qi.findtext(".//DEGRADED_MSI_DATA_PERCENTAGE")
            nodata_pixel_percentage = image_content_qi.findtext(".//NODATA_PIXEL_PERCENTAGE")
            saturated_defective_pixel_percentage = image_content_qi.findtext(".//SATURATED_DEFECTIVE_PIXEL_PERCENTAGE")
            dark_features_percentage = image_content_qi.findtext(".//DARK_FEATURES_PERCENTAGE")
            cloud_shadow_percentage = image_content_qi.findtext(".//CLOUD_SHADOW_PERCENTAGE")
            vegetation_percentage = image_content_qi.findtext(".//VEGETATION_PERCENTAGE")
            not_vegetated_percentage = image_content_qi.findtext(".//NOT_VEGETATED_PERCENTAGE")
            water_percentage = image_content_qi.findtext(".//WATER_PERCENTAGE")
            unclassified_percentage = image_content_qi.findtext(".//UNCLASSIFIED_PERCENTAGE")
            medium_proba_clouds_percentage = image_content_qi.findtext(".//MEDIUM_PROBA_CLOUDS_PERCENTAGE")
            high_proba_clouds_percentage = image_content_qi.findtext(".//HIGH_PROBA_CLOUDS_PERCENTAGE")
            thin_cirrus_percentage = image_content_qi.findtext(".//THIN_CIRRUS_PERCENTAGE")
            snow_ice_percentage = image_content_qi.findtext(".//SNOW_ICE_PERCENTAGE")
            radiative_transfer_accuracy = image_content_qi.findtext(".//RADIATIVE_TRANSFER_ACCURACY")
            water_vapour_retrieval_accuracy = image_content_qi.findtext(".//WATER_VAPOUR_RETRIEVAL_ACCURACY")
            aot_retrieval_accuracy = image_content_qi.findtext(".//AOT_RETRIEVAL_ACCURACY")
            aot_retrieval_method = image_content_qi.findtext(".//AOT_RETRIEVAL_METHOD")
            granule_mean_aot = image_content_qi.findtext(".//GRANULE_MEAN_AOT")
            granule_mean_wv = image_content_qi.findtext(".//GRANULE_MEAN_WV")
            ozone_source = image_content_qi.findtext(".//OZONE_SOURCE")
            ozone_value = image_content_qi.findtext(".//OZONE_VALUE")

            # Clear the QTextBrowser before populating it with new data
            self.dlg.MTD_info_textBrowser.clear()
            # Append the retrieved information to the QTextBrowser
            self.dlg.MTD_info_textBrowser.append(f"SENSING_TIME: {sensing_time}")
            self.dlg.MTD_info_textBrowser.append(f"HORIZONTAL_CS_CODE: {horizontal_cs_code}")
            self.dlg.MTD_info_textBrowser.append(f"ZENITH_ANGLE: {zenith_angle}")
            self.dlg.MTD_info_textBrowser.append(f"AZIMUTH_ANGLE: {azimuth_angle}")
            self.dlg.MTD_info_textBrowser.append(f"CLOUDY_PIXEL_PERCENTAGE: {cloudy_pixel_percentage}")
            self.dlg.MTD_info_textBrowser.append(
                f"CLOUDY_PIXEL_OVER_LAND_PERCENTAGE: {cloudy_pixel_over_land_percentage}")
            self.dlg.MTD_info_textBrowser.append(f"DEGRADED_MSI_DATA_PERCENTAGE: {degraded_msi_data_percentage}")
            self.dlg.MTD_info_textBrowser.append(f"NODATA_PIXEL_PERCENTAGE: {nodata_pixel_percentage}")
            self.dlg.MTD_info_textBrowser.append(
                f"SATURATED_DEFECTIVE_PIXEL_PERCENTAGE: {saturated_defective_pixel_percentage}")
            self.dlg.MTD_info_textBrowser.append(f"DARK_FEATURES_PERCENTAGE: {dark_features_percentage}")
            self.dlg.MTD_info_textBrowser.append(f"CLOUD_SHADOW_PERCENTAGE: {cloud_shadow_percentage}")
            self.dlg.MTD_info_textBrowser.append(f"VEGETATION_PERCENTAGE: {vegetation_percentage}")
            self.dlg.MTD_info_textBrowser.append(f"NOT_VEGETATED_PERCENTAGE: {not_vegetated_percentage}")
            self.dlg.MTD_info_textBrowser.append(f"WATER_PERCENTAGE: {water_percentage}")
            self.dlg.MTD_info_textBrowser.append(f"UNCLASSIFIED_PERCENTAGE: {unclassified_percentage}")
            self.dlg.MTD_info_textBrowser.append(f"MEDIUM_PROBA_CLOUDS_PERCENTAGE: {medium_proba_clouds_percentage}")
            self.dlg.MTD_info_textBrowser.append(f"HIGH_PROBA_CLOUDS_PERCENTAGE: {high_proba_clouds_percentage}")
            self.dlg.MTD_info_textBrowser.append(f"THIN_CIRRUS_PERCENTAGE: {thin_cirrus_percentage}")
            self.dlg.MTD_info_textBrowser.append(f"SNOW_ICE_PERCENTAGE: {snow_ice_percentage}")
            self.dlg.MTD_info_textBrowser.append(f"RADIATIVE_TRANSFER_ACCURACY: {radiative_transfer_accuracy}")
            self.dlg.MTD_info_textBrowser.append(f"WATER_VAPOUR_RETRIEVAL_ACCURACY: {water_vapour_retrieval_accuracy}")
            self.dlg.MTD_info_textBrowser.append(f"AOT_RETRIEVAL_ACCURACY: {aot_retrieval_accuracy}")
            self.dlg.MTD_info_textBrowser.append(f"AOT_RETRIEVAL_METHOD: {aot_retrieval_method}")
            self.dlg.MTD_info_textBrowser.append(f"GRANULE_MEAN_AOT: {granule_mean_aot}")
            self.dlg.MTD_info_textBrowser.append(f"GRANULE_MEAN_WV: {granule_mean_wv}")
            self.dlg.MTD_info_textBrowser.append(f"OZONE_SOURCE: {ozone_source}")
            self.dlg.MTD_info_textBrowser.append(f"OZONE_VALUE: {ozone_value}")


            # Set the path to the downloads folder in your application
    def btn_browse_clicked_absolute_path(self):
        # Open a file dialog to select a directory
        path = QFileDialog.getExistingDirectory(
            caption="Select Downloads Folder",
            directory="",
            options=QFileDialog.ShowDirsOnly | QFileDialog.DontResolveSymlinks
        )
        # Set the selected path as the downloads folder
        if path:
            # Perform the desired action with the selected path
            # Your code here
            print("Downloads folder path:", path)
            self.dlg.selected_data_input.setText(path)
            # Set the path to the downloads folder in your application
    def verify_storage_path_btn_verify(self):
        path=self.dlg.storage_path_input.toPlainText()
        flag,e=self.verify_storage_path(path)
        if flag:
            msg_box = QMessageBox()
            msg_box.setWindowTitle("Valid path")
            msg_box.setText('your path is valid !')
            msg_box.exec_()
        else:
            msg_box = QMessageBox()
            msg_box.setWindowTitle("Invalid path")
            msg_box.setText('your path is not valid !')
            msg_box.exec_()



    def verify_storage_path(self,path):
        if os.path.exists(path):
            seperator=self.changing_directory_seperator()
            if path.endswith(seperator):
                return True,''
            else :
                return True,seperator
        else:
            return False,''

    def previewData(self):
        table_widget = self.dlg.table_available_data
        selected_items = table_widget.selectedItems()
        if selected_items:
            # Retrieve the row index of the selected item
            selected_row = selected_items[0].row()
            # Retrieve the value of the "uuid" column for the selected row
            title = table_widget.item(selected_row, 1).text()
            uuid = table_widget.item(selected_row, 0).text()
            print("selected uuid to download its quicklook : ",uuid)
            storage_path = self.dlg.storage_path_input.toPlainText()
            str_path,sep=self.verify_storage_path(storage_path)
            if str_path==True:
                image_path=storage_path+sep+str(title)+'.jpeg'
                if os.path.exists(image_path):
                    pixmap = QPixmap(image_path)
                    desired_width = 181
                    desired_height = 161
                    # Resize the image using the scaled() method
                    resized_pixmap = pixmap.scaled(desired_width, desired_height, aspectRatioMode=Qt.KeepAspectRatio)
                    imagetopreview = self.dlg.image_preview
                    imagetopreview.setPixmap(resized_pixmap)
                    print("path to quicklook : ",image_path)
                else:
                    username = self.dlg.username_input.toPlainText()
                    password = self.dlg.password_input.text()
                    api = SentinelAPI(username, password, 'https://apihub.copernicus.eu/apihub')
                    try :
                        api.download_quicklook(uuid, directory_path=storage_path)
                        image_path = storage_path + sep + str(title) + '.jpeg'

                        pixmap = QPixmap(image_path)
                        desired_width = 181
                        desired_height = 161
                        # Resize the image using the scaled() method
                        resized_pixmap = pixmap.scaled(desired_width, desired_height, aspectRatioMode=Qt.KeepAspectRatio)
                        imagetopreview = self.dlg.image_preview
                        imagetopreview.setPixmap(resized_pixmap)
                        print("path to quicklook : ", image_path)
                    except sentinelsat.exceptions.SentinelAPIError:
                        print("error 500")
                        msg_box = QMessageBox()
                        msg_box.setWindowTitle("500 error ")
                        msg_box.setText('sentinelsat.exceptions.ServerError: HTTP status 500: ExpectedException : Navigation failed (result is null)')
                        msg_box.exec_()


            else:
                msg_box = QMessageBox()
                msg_box.setWindowTitle("Not a valid storage path")
                msg_box.setText('verify your storage path input')
                msg_box.exec_()
        else :
            print("nothing was selected")
            msg_box = QMessageBox()
            msg_box.setWindowTitle("Selection error")
            msg_box.setText('Nothing was selected')
            msg_box.exec_()

    def TP3_Download_Processing_satellite_images(self):
        verify_authentification=self.dlg.verify_authentification
        verify_authentification.clicked.connect(self.verify_authentification_function)
        satellite_types = ['Sentinel-2', 'Sentinel-3']
        list_of_satellites = self.dlg.list_of_satellites
        for i in satellite_types:
            list_of_satellites.addItem(i)
        longitude_input=self.dlg.longitude_input.toPlainText()
        latitude_input=self.dlg.latitude_input.toPlainText()
        verify_long_latit_btn=self.dlg.verify_long_lat
        verify_long_latit_btn.clicked.connect(self.verify_geojson)
        start_date=self.dlg.start_date_input.date()
        end_date=self.dlg.end_date_input.date()
        start_date_value=start_date.toString("yyyy-MM-dd")
        end_date_value=end_date.toString("yyyy-MM-dd")
        cloud_slider=self.dlg.cloud_cover_horizontalSlider
        self.dlg.cloud_cover_slider_value.setText('0')
        cloud_slider.valueChanged.connect(self.update_value_cloud)
        self.dlg.select_one_data.clicked.connect(self.select_satellites_data)
        self.dlg.preview_data.clicked.connect(self.previewData)
        self.dlg.run_indices_btn.clicked.connect(self.Run_indices_calculation)
        download_btn=self.dlg.download_data
        download_btn.clicked.connect(self.download_data_function)
        self.dlg.verify_storage_path_btn.clicked.connect(self.verify_storage_path_btn_verify)
        self.dlg.storage_path_btn.clicked.connect(self.btn_browse_clicked_storage_path)
        self.dlg.selected_data_btn.clicked.connect(self.btn_browse_clicked_absolute_path)
        self.dlg.MTD_fle_btn.clicked.connect(self.btn_browse_clicked_mtd_path)


    def download_data_function(self):
        table_widget = self.dlg.table_available_data
        selected_items = table_widget.selectedItems()
        if selected_items:
            # Retrieve the row index of the selected item
            selected_row = selected_items[0].row()

            # Retrieve the value of the "uuid" column for the selected row
            uuid = table_widget.item(selected_row, 0).text()
            storage_path = self.dlg.storage_path_input.toPlainText()
            download_path,sep=self.verify_storage_path(storage_path)
            username = self.dlg.username_input.toPlainText()
            password = self.dlg.password_input.text()
            # Prompt for user credentials
            # Connect to the API
            api = SentinelAPI(username, password, 'https://apihub.copernicus.eu/apihub')
            if self.verify_authentification_bolean(username,password):
                if download_path==True:
                    # Perform the actual download
                    try:
                        # Perform the actual download
                        print("Start Downloading")
                        # Perform the actual download asynchronously
                        self.start_download(api,uuid,storage_path,sep)
                        #api.download(uuid, directory_path=storage_path, checksum=True)


                    except InvalidChecksumError:
                        msg_box = QMessageBox()
                        msg_box.setWindowTitle("Error")
                        msg_box.setText(f"Invalid checksum for product: {uuid}")
                        msg_box.exec_()
                        # Handle the case when the checksum does not match the server's checksum
                        print(f"Invalid checksum for product: {uuid}")
                    except LTATriggered:
                        msg_box = QMessageBox()
                        msg_box.setWindowTitle("Error")
                        msg_box.setText(f"Retrieval triggered for product: {uuid}")
                        msg_box.exec_()
                        # Handle the case when the product has been archived and retrieval was successfully triggered
                        print(f"Retrieval triggered for product: {uuid}")
                    except LTAError:
                        msg_box = QMessageBox()
                        msg_box.setWindowTitle("Error")
                        msg_box.setText(f"Retrieval failed for product: {uuid}")
                        msg_box.exec_()
                        # Handle the case when the product has been archived and retrieval failed
                        print(f"Retrieval failed for product: {uuid}")
                else:
                    msg_box = QMessageBox()
                    msg_box.setWindowTitle("Not a valid storage path")
                    msg_box.setText('verify your storage path input')
                    msg_box.exec_()
            else:
                print("Authentication failed:")
                msg_box = QMessageBox()
                msg_box.setWindowTitle("Authentification Result")
                msg_box.setText('your cridential are not right !')
                msg_box.exec_()
        else:
            print("Nothing was selected:")
            msg_box = QMessageBox()
            msg_box.setWindowTitle("No selection")
            msg_box.setText('you didnt select any product')
            msg_box.exec_()

    def start_download(self,api, uuid, storage_path, sep):
        print("The Download has started:")
        msg_box = QMessageBox()
        msg_box.setWindowTitle("Download")
        msg_box.setText('Your downloaded has started , we will notify you when the download ends')
        msg_box.exec_()

        download_thread = DownloadThread(api, uuid, storage_path, sep)
        download_thread.start()


    def changing_directory_seperator(self):
        import os
        if os.name == "posix":
            directory_separator = "/"
        elif os.name == "nt":
            directory_separator = "\\"
        elif os.name == "mac":
            directory_separator = "/"
        else:
            directory_separator = "/"
        return directory_separator

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = SentipixDialog()
            self.dlg.password_input.setEchoMode(QtWidgets.QLineEdit.Password)

            self.TP3_Download_Processing_satellite_images()

        # Show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()

        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass


class DownloadThread(threading.Thread):
    def __init__(self, api, uuid, storage_path,sep):
        threading.Thread.__init__(self)
        self.api = api
        self.uuid = uuid
        self.storage_path = storage_path
        self.sep=sep

    def run(self):
        # Perform the actual download
        self.api.download(self.uuid, directory_path=self.storage_path, checksum=True)
        print("Data downloaded successfully")
        zip_file_downloaded = self.storage_path + self.sep + self.api.get_product_odata(self.uuid)[
            'title'] + '.zip'
        print("path to compressed data :", zip_file_downloaded)
        print("Begin extracting the content in zip")
        import zipfile
        # Path to the zip file
        # Directory to extract the contents to
        # Open the zip file
        with zipfile.ZipFile(zip_file_downloaded, 'r') as zip_ref:
            # Extract all contents to the specified directory
            zip_ref.extractall(self.storage_path)
        print('Folder extracted successfully.')
        path_to_extracted_folder = self.storage_path + self.sep + self.api.get_product_odata(self.uuid)[
            'product_root_dir']
        print("path to extracted folder : ", path_to_extracted_folder)
        print("The Download ended successfuly:")
        msg_box = QMessageBox()
        msg_box.setWindowTitle("Download success")
        download_str="Your download completed"
        msg_box.setText(download_str)
        msg_box.exec_()



